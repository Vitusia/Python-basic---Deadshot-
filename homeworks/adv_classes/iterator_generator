# 1. Implement class iterator for Fibonacci numbers https://en.wikipedia.org/wiki/Fibonacci_number
# Iterator get numbers of first Fibonacci numbers
# Example:
class fibonacci:
    def __init__(self, max = 60):
        self.a ,  self.b = 0, 1
        self.max = max
    def __iter__(self):
        return self
    def __next__(self):
        if self.a > self.max:
            raise StopIteration
        value_to_be_returned = self.a
        self.a, self.b = self.b, self.a + self.b
        return value_to_be_returned

if __name__ == '__main__':
    MY_FIBONACCI_NUMBERS = fibonacci()
    for i in MY_FIBONACCI_NUMBERS:
        print(i)

#
# # 2. Implement generator for Fibonacci numbers
def fibonacci(max):
    a, b = 0, 1
    while a < max:
        yield a
        a, b = b, a+b

if __name__ == '__main__':
    # Create a generator of fibonacci numbers smaller than 60
    FibonacciNumbers = fibonacci(60)
    # print out all the sequence
    for i in FibonacciNumbers:
        print(i)
# 3. Write generator expression that returns square numbers of integers from 0 to 10
def create_Gen_Square():
    my_list_gen =  range(11)
    for i in my_list_gen:
        yield i*i
mygenerator = create_Gen_Square()
for i in mygenerator:
    print(i)
# 4.Implement coroutine for accumulation arithmetic mean
# Example:
# def accumulation_mean():
#     # TODO implement
#     pass
#
# >>> acc_mean = accumulation_mean()
# >>> acc_mean.next()
# >>> acc_mean.send(2)
# 2
# >>> acc_mean.send(8)
# 5
# >>> acc_mean.send(2)
# 4
# >>> acc_mean.send(4)
# # 4

def accumulation_mean():
    # TODO implement
    total = 0.0
    count = 0
    average = None
    while True:
        term = yield average  # (2)
        total += term
        count += 1
        average = total / count
        print(average)
acc_mean = accumulation_mean()
next(acc_mean)
acc_mean.send(2)
acc_mean.send(8)
acc_mean.send(2)
acc_mean.send(4)

StopIteration
