# 1. Implement class iterator for Fibonacci numbers https://en.wikipedia.org/wiki/Fibonacci_number
# Iterator get numbers of first Fibonacci numbers
# Example:
class Fibonacci:
    def __init__(self, quantity):
        self.quantity = quantity
        self.start_num = 0
        self.next_num = 1

    def __iter__(self):
        return self

    def __next__(self):
        if self.quantity == 0:
            raise StopIteration
        self.quantity -= 1
        next_num = self.start_num + self.next_num
        self.start_num = self.next_num
        self.next_num = next_num

        return self.start_num

number_12 = Fibonacci(12)

for i in number_12:
    print(i)
# 1
# 1
# 2
# 3
# 5
# 8
# 13
# 21
# 34
# 55
# 89
# 144
#
# # 2. Implement generator for Fibonacci numbers
def fibonacci(num_2):
    a, b = 0, 1
    for c in range(num_2):
        yield  a
        a, b = b, a + b
for d in fibonacci(9):
    print(d)
# 1
# 1
# 2
# 3
# 5
# 8
# 13
# 21

# 3. Write generator expression that returns square numbers of integers from 0 to 10
def square_integers(lenght):
    for a in range(lenght):
        yield a ** 2
for d in square_integers(11):
    print(d)

# 0
# 1
# 4
# 9
# 16
# 25
# 36
# 49
# 64
# 81
# 100
# 4.Implement coroutine for accumulation arithmetic mean
def accumulation_mean():
    # TODO implement
    total = 0.0
    count = 0
    average = None
    while True:
        term = yield average  # (2)
        total += term
        count += 1
        average = total / count
        print(average)
acc_mean = accumulation_mean()
next(acc_mean)
acc_mean.send(2)
acc_mean.send(8)
acc_mean.send(2)
acc_mean.send(4)

StopIteration
